forest.meta(ma1,
fontfamily = "A",
print.tau2 = TRUE,
leftlabs = c("SMD No.", "d", "SE"))
ma2 <- metagen(TE = smd_re2,
seTE = sqrt(v_re2),
studlab = id_comparison,
data = df,
sm = "SMD",
fixed = FALSE,
random = TRUE, # a random effects MA
method.tau = "DL", # DerSimonian-Laird estimator
)
png("figures/fig3_mam2.png", units = "in", width = 7.2, height = 6, res = 300)
forest.meta(ma2,
fontfamily = "A",
print.tau2 = TRUE,
leftlabs = c("SMD No.", "d", "SE"))
ma3 <- metagen(TE = smd_ma,
seTE = se_ma,
studlab = id_comparison,
data = df,
sm = "SMD",
fixed = FALSE,
random = TRUE, # a random effects MA
method.tau = "DL", # DerSimonian-Laird estimator
)
png("figures/fig3_mam3.png", units = "in", width = 7.2, height = 6, res = 300)
forest.meta(ma3,
fontfamily = "A",
print.tau2 = TRUE,
leftlabs = c("SMD No.", "d", "SE"))
petpeese <- data.frame(smd = df$smd_ma) # smds
petpeese$v <- df$v_ma # sampling variances (extracted from the figures)
petpeese$se <- df$se_ma # standard errors of SMD estimates
petpeese$w <- 1/petpeese$v # inverse variance weights
pet <- lm(smd ~ se, weights = w, data = petpeese)
summary(pet)$coefficients
peese <- lm(smd ~ v, weights = w, data = petpeese)
summary(peese)$coefficients
pcurve(ma3,
effect.estimation = TRUE,
N = df$nt_ma + df$nc_ma,
dmin = 0,
dmax = 1)
ma3_metafor <- rma(yi = smd_ma,
sei = se_ma,
data = df,
method = "DL")
selmodel(ma3_metafor,
type = "stepfun",
steps = 0.025)
metainf(ma3, pooled = "random")
outl <- InfluenceAnalysis(ma3, random = TRUE, text.scale = 2)
png("figures/fig6.png", units = "in", width = 5, height = 5, res = 300)
plot(outl, "baujat")
plot(outl, "ES")
s <- update.meta(ma3, subset = -c(6, 7, 8))
forest.meta(s,
print.tau2 = TRUE,
leftlabs = c("SMD No.", "d", "SE"))
df <- read_excel("data_thesis/Data_ps_raw_updated.xlsx", sheet = "MA2")
# remove characters marking SEs, upper bounds of SE bars, or upper bounds of CIs, to convert to SDs
df[] <- lapply(df, gsub, pattern = '/', replacement = '', fixed = TRUE)
df[] <- lapply(df, gsub, pattern = '*', replacement = '', fixed = TRUE)
# make values numeric
df <- df %>% mutate_at(vars(starts_with('sd')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('mt')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('mc')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('smd')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('n')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('ci')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('p_')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('t_')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('F_')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('se')), as.numeric)
# Convert upper bounds of SE bars extracted from figures to SDs
df[10, "sdc_ps.1"] <- (df[10, "sdc_ps.1"] - df[10, "mc_ps.1"]) * sqrt(13)
df[10, "sdt_ps.1"] <- (df[10, "sdt_ps.1"] - df[10, "mt_ps.1"]) * sqrt(13)
df[11, "sdc_ps.1"] <- (df[11, "sdc_ps.1"] - df[11, "mc_ps.1"]) * sqrt(13)
df[11, "sdt_ps.1"] <- (df[11, "sdt_ps.1"] - df[11, "mt_ps.1"]) * sqrt(13)
df[12, "sdc_ps.1"] <- (df[12, "sdc_ps.1"] - df[12, "mc_ps.1"]) * sqrt(6)
df[12, "sdt_ps.1"] <- (df[12, "sdt_ps.1"] - df[12, "mt_ps.1"]) * sqrt(7)
df[18, "sdc_ps.1"] <- (df[18, "sdc_ps.1"] - df[18, "mc_ps.1"]) * sqrt(13)
# Convert lower bounds of SE bars extracted from figures to SDs
df[13, "sdc_ps.1"] <- (df[13, "sdc_ps.1"] + df[13, "mc_ps.1"]) * sqrt(25)
df[13, "sdt_ps.1"] <- (df[13, "sdt_ps.1"] + df[13, "mt_ps.1"]) * sqrt(25)
df[18, "sdt_ps.1"] <- (df[18, "sdt_ps.1"] + df[18, "mt_ps.1"]) * sqrt(13)
# average group sample size
mean((df$nc_ma + df$nt_ma) / 2)
#df <- compute_dgs(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df, denom = "pooled.sd")
# relocate to facilitate inspection
#df <- df %>% relocate(c(d, g, smd_ma), .after = dv_ps)
df <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df, denom = "pooled.sd")
# relocate to facilitate inspection
df <- df %>% relocate(c(id_comparison, d, smd_ma), .after = dv_ps)
# one-tailed p-value + sample sizes to d
p_to_d1(0.925, 6, 5)[1]
p_to_d1(0.897, 6, 5)[1]
# two-tailed p-value + sample sizes to d
p_to_d2(0.925, 6, 5)[1]
p_to_d2(0.897, 6, 5)[1]
# Set 2
compute_ds(nt_ps, mt_ps.2, sdt_ps.2, nc_ps, mc_ps.2, sdc_ps.2, data = df, denom = "pooled.sd")$d[[14]]
compute_ds(nt_ps, mt_ps.2, sdt_ps.2, nc_ps, mc_ps.2, sdc_ps.2, data = df, denom = "pooled.sd")$d[[15]]
# Set 3
compute_ds(nt_ps, mt_ps.3, sdt_ps.3, nc_ps, mc_ps.3, sdc_ps.3, data = df, denom = "pooled.sd")$d[[14]]
compute_ds(nt_ps, mt_ps.3, sdt_ps.3, nc_ps, mc_ps.3, sdc_ps.3, data = df, denom = "pooled.sd")$d[[15]]
df2 <- df %>% filter(is.na(nc_ps))
df2 <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df2, denom = "pooled.sd")
# Set 2
compute_ds(n_ps, mt_ps.2, sdt_ps.2, n_ps, mc_ps.2, sdc_ps.2, data = df, denom = "pooled.sd")$d[[1]]
# Set 3
compute_ds(n_ps, mt_ps.3, sdt_ps.3, n_ps, mc_ps.3, sdc_ps.3, data = df, denom = "pooled.sd")$d[[1]]
# p-value
p_to_d1(df$p_ps[[1]], df$n_ps[[1]], df$n_ps[[1]])[1]
p_to_d2(df$p_ps[[1]], df$n_ps[[1]], df$n_ps[[1]])[1]
p_to_d1(df$p_ps[[2]], df$n_ps[[2]], df$n_ps[[2]])[1]
p_to_d2(df$p_ps[[2]], df$n_ps[[2]], df$n_ps[[2]])[1]
compute_ds(n_ps, mt_ps.2, sdt_ps.2, n_ps, mc_ps.2, sdc_ps.2, data = df, denom = "pooled.sd")$d[[4]]
compute_ds(n_ps, mt_ps.2, sdt_ps.2, n_ps, mc_ps.2, sdc_ps.2, data = df, denom = "pooled.sd")$d[[5]]
compute_ds(n_ps, mt_ps.2, sdt_ps.2, n_ps, mc_ps.2, sdc_ps.2, data = df, denom = "pooled.sd")$d[[20]]
p_to_d1(df$p_ps[[19]], df$n_ps[[19]], df$n_ps[[19]])[1]
p_to_d2(df$p_ps[[19]], df$n_ps[[19]], df$n_ps[[19]])[1]
# Convert upper bounds of SD bars extracted from figures to SDs
df[6, "sdc_ps.2"] <- (df[6, "sdc_ps.2"] - df[6, "mc_ps.2"])
df[6, "sdt_ps.2"] <- (df[6, "sdt_ps.2"] - df[6, "mt_ps.2"])
df[7, "sdc_ps.2"] <- (df[7, "sdc_ps.2"] - df[7, "mc_ps.2"])
df[7, "sdt_ps.2"] <- (df[7, "sdt_ps.2"] - df[7, "mt_ps.2"])
# Compute Cohen's ds
compute_ds(n_ps, mt_ps.2, sdt_ps.2, n_ps, mc_ps.2, sdc_ps.2, data = df, denom = "pooled.sd")$d[[6]]
compute_ds(n_ps, mt_ps.2, sdt_ps.2, n_ps, mc_ps.2, sdc_ps.2, data = df, denom = "pooled.sd")$d[[7]]
2.5 * sqrt(4)
p_to_d2(df$p_ps[[8]], df$nc_ps[[8]], df$nt_ps[[8]])[1]
p_to_d2(df$p_ps[[9]], df$nc_ps[[9]], df$nt_ps[[9]])[1]
df$smd_re1[[1]] <- NA
df$smd_re1[[2]] <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df[2,], denom = "pooled.sd")$d
df$smd_re1[[3]] <- NA
df$smd_re1[[4]] <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df[4,], denom = "pooled.sd")$d
df$smd_re1[[5]] <- compute_ds(n_ps, mt_ps.2, sdt_ps.2, n_ps, mc_ps.2, sdc_ps.2, data = df[5,], denom = "pooled.sd")$d
df$smd_re1[[6]] <- compute_ds(nt_ps, mt_ps.2, sdt_ps.2, nc_ps, mc_ps.2, sdc_ps.2, data = df[6,], denom = "pooled.sd")$d
df$smd_re1[[7]] <- compute_ds(nt_ps, mt_ps.2, sdt_ps.2, nc_ps, mc_ps.2, sdc_ps.2, data = df[7,], denom = "pooled.sd")$d
df$smd_re1[[8]] <- NA
df$smd_re1[[9]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[9,], denom = "pooled.sd")$d
df$smd_re1[[10]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[10,], denom = "pooled.sd")$d
df$smd_re1[[11]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[11,], denom = "pooled.sd")$d %>% abs()
df$smd_re1[[12]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[12,], denom = "pooled.sd")$d
df$smd_re1[[13]] <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df[13,], denom = "pooled.sd")$d
df$smd_re1[[14]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[14,], denom = "pooled.sd")$d
df$smd_re1[[15]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[15,], denom = "pooled.sd")$d
df$smd_re1[[16]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[16,], denom = "pooled.sd")$d
df$smd_re1[[17]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[17,], denom = "pooled.sd")$d
df$smd_re1[[18]] <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df[18,], denom = "pooled.sd")$d %>% abs()
df$smd_re1[[19]] <- -p_to_d1(df$p_ps[[19]], df$n_ps[[19]], df$n_ps[[19]])[1]
df$smd_re1[[20]] <- compute_ds(n_ps, mt_ps.2, sdt_ps.2, n_ps, mc_ps.2, sdc_ps.2, data = df[20,], denom = "pooled.sd")$d
# make numeric
df$smd_re1 <- df$smd_re1 %>% as.numeric()
# relocate to check if everything's fine
df <- df %>% relocate(c(id_comparison, smd_re1, smd_ma), .after = dv_ps)
df$smd_re2[[1]] <- compute_ds(n_ps, mt_ps.2, sdt_ps.2, n_ps, mc_ps.2, sdc_ps.2, data = df[1,], denom = "pooled.sd")$d
df$smd_re2[[2]] <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df[2,], denom = "pooled.sd")$d
df$smd_re2[[3]] <- df$smd_ps[[3]]
df$smd_re2[[4]] <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df[4,], denom = "pooled.sd")$d
df$smd_re2[[5]] <- compute_ds(n_ps, mt_ps.2, sdt_ps.2, n_ps, mc_ps.2, sdc_ps.2, data = df[5,], denom = "pooled.sd")$d
df$smd_re2[[6]] <- compute_ds(nt_ps, mt_ps.2, sdt_ps.2, nc_ps, mc_ps.2, sdc_ps.2, data = df[6,], denom = "pooled.sd")$d
df$smd_re2[[7]] <- compute_ds(nt_ps, mt_ps.2, sdt_ps.2, nc_ps, mc_ps.2, sdc_ps.2, data = df[7,], denom = "pooled.sd")$d
df$smd_re2[[8]] <- -p_to_d2(df$p_ps[[8]], df$nc_ps[[8]], df$nt_ps[[8]])[1]
df$smd_re2[[9]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[9,], denom = "pooled.sd")$d
df$smd_re2[[10]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[10,], denom = "pooled.sd")$d
df$smd_re2[[11]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[11,], denom = "pooled.sd")$d %>% abs()
df$smd_re2[[12]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[12,], denom = "pooled.sd")$d
df$smd_re2[[13]] <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df[13,], denom = "pooled.sd")$d
df$smd_re2[[14]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[14,], denom = "pooled.sd")$d
df$smd_re2[[15]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[15,], denom = "pooled.sd")$d
df$smd_re2[[16]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[16,], denom = "pooled.sd")$d
df$smd_re2[[17]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[17,], denom = "pooled.sd")$d
df$smd_re2[[18]] <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df[18,], denom = "pooled.sd")$d %>% abs()
df$smd_re2[[19]] <- -p_to_d1(df$p_ps[[19]], df$n_ps[[19]], df$n_ps[[19]])[1]
df$smd_re2[[20]] <- compute_ds(n_ps, mt_ps.2, sdt_ps.2, n_ps, mc_ps.2, sdc_ps.2, data = df[20,], denom = "pooled.sd")$d
# make numeric
df$smd_re2 <- df$smd_re2 %>% as.numeric()
# relocate to check if everything's fine
df <- df %>% relocate(smd_re2, .after = smd_re1)
df$v_re1[[1]] <- NA
df$v_re1[[2]] <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df[2,], denom = "pooled.sd")$var.d
df$v_re1[[3]] <- NA
df$v_re1[[4]] <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df[4,], denom = "pooled.sd")$var.d
df$v_re1[[5]] <- compute_ds(n_ps, mt_ps.2, sdt_ps.2, n_ps, mc_ps.2, sdc_ps.2, data = df[5,], denom = "pooled.sd")$var.d
df$v_re1[[6]] <- compute_ds(nt_ps, mt_ps.2, sdt_ps.2, nc_ps, mc_ps.2, sdc_ps.2, data = df[6,], denom = "pooled.sd")$var.d
df$v_re1[[7]] <- compute_ds(nt_ps, mt_ps.2, sdt_ps.2, nc_ps, mc_ps.2, sdc_ps.2, data = df[7,], denom = "pooled.sd")$var.d
df$v_re1[[8]] <- NA
df$v_re1[[9]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[9,], denom = "pooled.sd")$var.d
df$v_re1[[10]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[10,], denom = "pooled.sd")$var.d
df$v_re1[[11]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[11,], denom = "pooled.sd")$var.d
df$v_re1[[12]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[12,], denom = "pooled.sd")$var.d
df$v_re1[[13]] <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df[13,], denom = "pooled.sd")$var.d
df$v_re1[[14]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[14,], denom = "pooled.sd")$var.d
df$v_re1[[15]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[15,], denom = "pooled.sd")$var.d
df$v_re1[[16]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[16,], denom = "pooled.sd")$var.d
df$v_re1[[17]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[17,], denom = "pooled.sd")$var.d
df$v_re1[[18]] <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df[18,], denom = "pooled.sd")$var.d
df$v_re1[[19]] <- p_to_d1(df$p_ps[[19]], df$n_ps[[19]], df$n_ps[[19]])[2]
df$v_re1[[20]] <- compute_ds(n_ps, mt_ps.2, sdt_ps.2, n_ps, mc_ps.2, sdc_ps.2, data = df[20,], denom = "pooled.sd")$var.d
# make numeric
df$v_re1 <- df$v_re1 %>% as.numeric()
# relocate to check if everything's fine
df$v_ma <- df$se_ma^2
df <- df %>% relocate(c(id_comparison, v_re1, v_ma), .after = dv_ps)
df$v_re2[[1]] <- compute_ds(n_ps, mt_ps.2, sdt_ps.2, n_ps, mc_ps.2, sdc_ps.2, data = df[1,], denom = "pooled.sd")$var.d
df$v_re2[[2]] <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df[2,], denom = "pooled.sd")$var.d
df$v_re2[[3]] <- ((df$n_ps[[3]] + df$n_ps[[3]]) / (df$n_ps[[3]]*df$n_ps[[3]])) + (df$smd_ps[[3]]^2 / (2 * (df$n_ps[[3]] + df$n_ps[[3]])))
df$v_re2[[4]] <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df[4,], denom = "pooled.sd")$var.d
df$v_re2[[5]] <- compute_ds(n_ps, mt_ps.2, sdt_ps.2, n_ps, mc_ps.2, sdc_ps.2, data = df[5,], denom = "pooled.sd")$var.d
df$v_re2[[6]] <- compute_ds(nt_ps, mt_ps.2, sdt_ps.2, nc_ps, mc_ps.2, sdc_ps.2, data = df[6,], denom = "pooled.sd")$var.d
df$v_re2[[7]] <- compute_ds(nt_ps, mt_ps.2, sdt_ps.2, nc_ps, mc_ps.2, sdc_ps.2, data = df[7,], denom = "pooled.sd")$var.d
df$v_re2[[8]] <- p_to_d2(df$p_ps[[8]], df$nc_ps[[8]], df$nt_ps[[8]])[2]
df$v_re2[[9]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[9,], denom = "pooled.sd")$var.d
df$v_re2[[10]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[10,], denom = "pooled.sd")$var.d
df$v_re2[[11]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[11,], denom = "pooled.sd")$var.d
df$v_re2[[12]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[12,], denom = "pooled.sd")$var.d
df$v_re2[[13]] <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df[13,], denom = "pooled.sd")$var.d
df$v_re2[[14]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[14,], denom = "pooled.sd")$var.d
df$v_re2[[15]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[15,], denom = "pooled.sd")$var.d
df$v_re2[[16]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[16,], denom = "pooled.sd")$var.d
df$v_re2[[17]] <- compute_ds(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[17,], denom = "pooled.sd")$var.d
df$v_re2[[18]] <- compute_ds(n_ps, mt_ps.1, sdt_ps.1, n_ps, mc_ps.1, sdc_ps.1, data = df[18,], denom = "pooled.sd")$var.d
df$v_re2[[19]] <- p_to_d1(df$p_ps[[19]], df$n_ps[[19]], df$n_ps[[19]])[2]
df$v_re2[[20]] <- compute_ds(n_ps, mt_ps.2, sdt_ps.2, n_ps, mc_ps.2, sdc_ps.2, data = df[20,], denom = "pooled.sd")$var.d
# make numeric
df$v_re2 <- df$v_re2 %>% as.numeric()
ma1 <- metagen(TE = smd_re1,
seTE = sqrt(v_re1),
studlab = id_comparison,
data = df,
sm = "SMD",
fixed = FALSE,
random = TRUE, # a random effects MA
method.tau = "DL", # DerSimonian-Laird estimator
)
windowsFonts(A = windowsFont("Times New Roman"))
png("figures/fig4_mam1.png", units = "in", width = 7.2, height = 6, res = 300)
forest.meta(ma1,
fontfamily = "A",
print.tau2 = TRUE,
leftlabs = c("SMD No.", "d", "SE"))
ma2 <- metagen(TE = smd_re2,
seTE = sqrt(v_re2),
studlab = id_comparison,
data = df,
sm = "SMD",
fixed = FALSE,
random = TRUE, # a random effects MA
method.tau = "DL", # DerSimonian-Laird estimator
)
png("figures/fig4_mam2.png", units = "in", width = 7.2, height = 6, res = 300)
forest.meta(ma2,
fontfamily = "A",
print.tau2 = TRUE,
leftlabs = c("SMD No.", "d", "SE"))
ma3 <- metagen(TE = smd_ma,
seTE = se_ma,
studlab = id_comparison,
data = df,
sm = "SMD",
fixed = FALSE,
random = TRUE, # a random effects MA
method.tau = "DL", # DerSimonian-Laird estimator
)
png("figures/fig4_mam3.png", units = "in", width = 7.2, height = 6, res = 300)
forest.meta(ma3,
fontfamily = "A",
print.tau2 = TRUE,
leftlabs = c("SMD No.", "d", "SE"))
petpeese <- data.frame(smd = df$smd_ma) # smds
petpeese$v <- df$se_ma^2 # sampling variances (extracted from the figures)
petpeese$se <- df$se_ma # standard errors of SMD estimates
petpeese$w <- 1/petpeese$v # inverse variance weights
pet <- lm(smd ~ se, weights = w, data = petpeese)
summary(pet)$coefficients
peese <- lm(smd ~ v, weights = w, data = petpeese)
summary(peese)$coefficients
pcurve(ma3,
effect.estimation = TRUE,
N = df$nt_ma + df$nc_ma,
dmin = 0,
dmax = 1)
ma3_metafor <- rma(yi = smd_ma,
sei = se_ma,
data = df,
method = "DL")
selmodel(ma3_metafor,
type = "stepfun",
steps = 0.025)
metainf(ma3, pooled = "random")
outl <- InfluenceAnalysis(ma3, random = TRUE, text.scale = 2)
png("figures/fig7.png", units = "in", width = 5, height = 5, res = 300)
plot(outl, "baujat")
plot(outl, "ES")
s <- update.meta(ma1, subset = -c(8, 9, 11, 19))
forest.meta(s,
print.tau2 = TRUE,
leftlabs = c("SMD No.", "d", "SE"))
df <- read_excel("data_thesis/Data_ps_raw_updated.xlsx", sheet = "MA3")
# make values numeric
df <- df %>% mutate_at(vars(starts_with('sd')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('mt')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('mc')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('smd')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('n')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('ci')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('p_')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('t_')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('F_')), as.numeric)
df <- df %>% mutate_at(vars(starts_with('si')), as.numeric)
# average group sample size
mean((df$nc_ma + df$nt_ma) / 2, na.rm = TRUE)
df <- compute_dgs(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df, denom = "pooled.sd")
# relocate to facilitate inspection
df <- df %>% relocate(c(id_comparison, g, smd_ma), .after = dv_ps)
t_to_d(df$t_ps[[6]], df$nt_ps[[6]], df$nc_ps[[6]])[1]
df$d <- p_to_d2(0.01, df$nt_ps[[1]], df$nc_ps[[1]])[1]
df$vd <- p_to_d2(0.01, df$nt_ps[[1]], df$nc_ps[[1]])[2]
compute_gs(d, vd, nt_ps, nc_ps, df)$g[1]
compute_dgs(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[2,], denom = "pooled.sd")$g
compute_dgs(nt_ps, mt_ps.2, sdt_ps.2, nc_ps, mc_ps.2, sdc_ps.2, data = df[2,], denom = "pooled.sd")$g
df$mt_ps.3 <- (df$mt_ps.1 + df$mt_ps.2) / 2
df$sdt_ps.3 <- (df$sdt_ps.1 + df$sdt_ps.2) / 2
compute_dgs(nt_ps, mt_ps.3, sdt_ps.3, nc_ps, mc_ps.1, sdc_ps.1, data = df[2,], denom = "pooled.sd")$g
df$mt_ps.3[[2]] <- (df$mt_ps.1[[2]] + df$mt_ps.2[[2]]) / 2
df$sdt_ps.3[[2]] <- (df$sdt_ps.1[[2]] + df$sdt_ps.2[[2]]) / 2
compute_dgs(nt_ps*2, mt_ps.3, sdt_ps.3, nc_ps, mc_ps.1, sdc_ps.1, data = df[2,], denom = "pooled.sd")$g
compute_dgs(nt_ps*2, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[2,], denom = "pooled.sd")$g
compute_dgs(nt_ps*2, mt_ps.2, sdt_ps.2, nc_ps, mc_ps.2, sdc_ps.2, data = df[2,], denom = "pooled.sd")$g
df$d <- p_to_d2(0.01, df$n_ps[[3]], df$n_ps[[3]])[1]
df$vd <- p_to_d2(0.01, df$n_ps[[3]], df$n_ps[[3]])[2]
compute_gs(d, vd, n_ps, n_ps, df)$g[3]
compute_dgs(nt_ps, mt_ps.2, sdt_ps.2, nc_ps, mc_ps.2, sdc_ps.2, data = df[5,], denom = "pooled.sd")$g
df$mc_ps.3 <- (df$mc_ps.1 + df$mc_ps.2) / 2
df$mt_ps.3 <- (df$mt_ps.1 + df$mt_ps.2) / 2
df$sdc_ps.3 <- (df$sdc_ps.1 + df$sdc_ps.2) / 2
df$sdt_ps.3 <- (df$sdt_ps.1 + df$sdt_ps.2) / 2
compute_dgs(nt_ps, mt_ps.3, sdt_ps.3, nc_ps, mc_ps.3, sdc_ps.3, data = df[5,], denom = "pooled.sd")$g
df$d <- p_to_d2(0.169, df$nc_ps[[6]], df$nt_ps[[6]])[1]
df$vd <- p_to_d2(0.169, df$nc_ps[[6]], df$nt_ps[[6]])[2]
compute_gs(d, vd, nt_ps, nc_ps, df)$g[6]
# 1
df$smd_re1[[1]] <- NA
# 2
df$mt_ps.3 <- (df$mt_ps.1 + df$mt_ps.2) / 2
df$sdt_ps.3 <- (df$sdt_ps.1 + df$sdt_ps.2) / 2
df$smd_re1[[2]] <- compute_dgs(nt_ps, mt_ps.3, sdt_ps.3, nc_ps, mc_ps.1, sdc_ps.1, data = df[2,], denom = "pooled.sd")$g %>% abs()
# 3
df$smd_re1[[3]] <- NA
# 4
df$smd_re1[[4]] <- NA
#5
df$mc_ps.3 <- (df$mc_ps.1 + df$mc_ps.2) / 2
df$mt_ps.3 <- (df$mt_ps.1 + df$mt_ps.2) / 2
df$sdc_ps.3 <- (df$sdc_ps.1 + df$sdc_ps.2) / 2
df$sdt_ps.3 <- (df$sdt_ps.1 + df$sdt_ps.2) / 2
df$smd_re1[[5]] <- compute_dgs(nt_ps, mt_ps.3, sdt_ps.3, nc_ps, mc_ps.3, sdc_ps.3, data = df[5,], denom = "pooled.sd")$g
#6
df$smd_re1[[6]] <- NA
# make numeric
df <- df %>% mutate_at(vars(starts_with('smd')), as.numeric)
# relocate to facilitate inspection
df <- df %>% relocate(c(smd_re1, smd_ma, id_comparison),  .after = dv_ps)
# 1
df$d <- p_to_d2(df$p_ps[[1]], df$nt_ps[[1]], df$nc_ps[[1]])[1]
df$vd <- p_to_d2(df$p_ps[[1]], df$nt_ps[[1]], df$nc_ps[[1]])[2]
df$smd_re2[[1]] <- compute_gs(d, vd, nt_ps, nc_ps, df)$g[1]
# 2
df$smd_re2[[2]] <- compute_dgs(nt_ps*2, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[2,], denom = "pooled.sd")$g %>% abs()
# 3
df$d <- p_to_d2(df$p_ps[[3]], df$n_ps[[3]], df$n_ps[[3]])[1]
df$vd <- p_to_d2(df$p_ps[[3]], df$n_ps[[3]], df$n_ps[[3]])[2]
df$smd_re2[[3]] <- compute_gs(d, vd, n_ps, n_ps, df)$g[3]
# 4
df$smd_re2[[4]] <- compute_dgs(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[4,], denom = "pooled.sd")$g
#5
df$mc_ps.3 <- (df$mc_ps.1 + df$mc_ps.2) / 2
df$mt_ps.3 <- (df$mt_ps.1 + df$mt_ps.2) / 2
df$sdc_ps.3 <- (df$sdc_ps.1 + df$sdc_ps.2) / 2
df$sdt_ps.3 <- (df$sdt_ps.1 + df$sdt_ps.2) / 2
df$smd_re2[[5]] <- compute_dgs(nt_ps, mt_ps.3, sdt_ps.3, nc_ps, mc_ps.3, sdc_ps.3, data = df[5,], denom = "pooled.sd")$g
#6
df$d <- p_to_d2(df$p_ps[[6]], df$nc_ps[[6]], df$nt_ps[[6]])[1]
df$vd <- p_to_d2(df$p_ps[[6]], df$nc_ps[[6]], df$nt_ps[[6]])[2]
df$smd_re2[[6]] <- compute_gs(d, vd, nt_ps, nc_ps, df)$g[6]
# make numeric
df <- df %>% mutate_at(vars(starts_with('smd')), as.numeric)
# relocate to facilitate inspection
df <- df %>% relocate(smd_re2,  .after = smd_re1)
# 1
df$v_re1[[1]] <- NA
# 2
df$v_re1[[2]] <- compute_dgs(nt_ps, mt_ps.3, sdt_ps.3, nc_ps, mc_ps.1, sdc_ps.1, data = df[2,], denom = "pooled.sd")$var.g
# 3
df$v_re1[[3]] <- NA
# 4
df$v_re1[[4]] <- NA
#5
df$mc_ps.3 <- (df$mc_ps.1 + df$mc_ps.2) / 2
df$mt_ps.3 <- (df$mt_ps.1 + df$mt_ps.2) / 2
df$sdc_ps.3 <- (df$sdc_ps.1 + df$sdc_ps.2) / 2
df$sdt_ps.3 <- (df$sdt_ps.1 + df$sdt_ps.2) / 2
df$v_re1[[5]] <- compute_dgs(nt_ps, mt_ps.3, sdt_ps.3, nc_ps, mc_ps.3, sdc_ps.3, data = df[5,], denom = "pooled.sd")$var.g
#6
df$v_re1[[6]] <- NA
# 1
df$d <- p_to_d2(0.01, df$nt_ps[[1]], df$nc_ps[[1]])[1]
df$vd <- p_to_d2(0.01, df$nt_ps[[1]], df$nc_ps[[1]])[2]
df$v_re2[[1]] <- compute_gs(d, vd, nt_ps, nc_ps, df)$var.g[1]
# 2
df$v_re2[[2]] <- compute_dgs(nt_ps*2, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[2,], denom = "pooled.sd")$var.g
# 3
df$d <- p_to_d2(0.01, df$n_ps[[3]], df$n_ps[[3]])[1]
df$vd <- p_to_d2(0.01, df$n_ps[[3]], df$n_ps[[3]])[2]
df$v_re2[[3]] <- compute_gs(d, vd, n_ps, n_ps, df)$var.g[3]
# 4
df$v_re2[[4]] <- compute_dgs(nt_ps, mt_ps.1, sdt_ps.1, nc_ps, mc_ps.1, sdc_ps.1, data = df[4,], denom = "pooled.sd")$var.g
#5
df$mc_ps.3 <- (df$mc_ps.1 + df$mc_ps.2) / 2
df$mt_ps.3 <- (df$mt_ps.1 + df$mt_ps.2) / 2
df$sdc_ps.3 <- (df$sdc_ps.1 + df$sdc_ps.2) / 2
df$sdt_ps.3 <- (df$sdt_ps.1 + df$sdt_ps.2) / 2
df$v_re2[[5]] <- compute_dgs(nt_ps, mt_ps.3, sdt_ps.3, nc_ps, mc_ps.3, sdc_ps.3, data = df[5,], denom = "pooled.sd")$var.g
#6
df$d <- p_to_d2(0.169, df$nc_ps[[6]], df$nt_ps[[6]])[1]
df$vd <- p_to_d2(0.169, df$nc_ps[[6]], df$nt_ps[[6]])[2]
df$v_re2[[6]] <- compute_gs(d, vd, nt_ps, nc_ps, df)$var.g[6]
# make numeric
df <- df %>% mutate_at(vars(starts_with('v_')), as.numeric)
df$v_ma <- ((df$ciu_ma - df$smd_ma) / 1.96)^2
df$se_ma <- ((df$ciu_ma - df$smd_ma) / 1.96)
# compare with reproduced variances
df <- df %>% relocate(c(v_re1, v_re2, v_ma), .after = smd_ma)
ma1 <- metagen(TE = smd_re1,
seTE = sqrt(v_re1),
studlab = id_comparison,
data = df,
sm = "SMD",
fixed = FALSE,
random = TRUE, # a random effects MA
method.tau = "DL", # DerSimonian-Laird estimator
)
windowsFonts(A = windowsFont("Times New Roman"))
png("figures/fig5_mam1.png", units = "in", width = 7.2, height = 3, res = 300)
forest.meta(ma1,
fontfamily = "A",
print.tau2 = TRUE,
leftlabs = c("SMD No.", "g", "SE"))
ma2 <- metagen(TE = smd_re2,
seTE = sqrt(v_re2),
studlab = id_comparison,
data = df,
sm = "SMD",
fixed = FALSE,
random = TRUE, # a random effects MA
method.tau = "DL", # DerSimonian-Laird estimator
)
png("figures/fig5_mam2.png", units = "in", width = 7.2, height = 3, res = 300)
forest.meta(ma2,
fontfamily = "A",
print.tau2 = TRUE,
leftlabs = c("SMD No.", "g", "SE"))
ma3 <- metagen(TE = smd_ma,
seTE = se_ma,
studlab = as.character(id_comparison),
data = df,
sm = "SMD",
fixed = FALSE,
random = TRUE, # a random effects MA
method.tau = "DL", # DerSimonian-Laird estimator
)
png("figures/fig5_mam3.png", units = "in", width = 7.2, height = 3, res = 300)
forest.meta(ma3,
fontfamily = "A",
print.tau2 = TRUE,
leftlabs = c("SMD No.", "g", "SE"))
petpeese <- data.frame(smd = df$smd_ma) # smds
petpeese$v <- df$v_ma # sampling variances (extracted from the figures)
petpeese$se <- df$se_ma # standard errors of SMD estimates
petpeese$w <- 1/petpeese$v # inverse variance weights
pet <- lm(smd ~ se, weights = w, data = petpeese)
summary(pet)$coefficients
peese <- lm(smd ~ v, weights = w, data = petpeese)
summary(peese)$coefficients
pcurve(ma3,
effect.estimation = TRUE,
N = df$nt_ma + df$nc_ma,
dmin = 0,
dmax = 1)
ma3_metafor <- rma(yi = smd_ma,
sei = se_ma,
data = df,
method = "DL")
selmodel(ma3_metafor,
type = "stepfun",
steps = 0.025)
metainf(ma3, pooled = "random")
outl <- InfluenceAnalysis(ma3, random = TRUE, text.scale = 2)
png("figures/fig8.png", units = "in", width = 5, height = 5, res = 300)
plot(outl, "baujat")
plot(outl, "ES")
s <- update.meta(ma3, subset = -c(2))
forest.meta(s,
print.tau2 = TRUE,
leftlabs = c("SMD No.", "g", "SE"))
iris$Centered.Petal.Length <- scale(iris$Petal.Length, center = TRUE, scale = FALSE)
mean(iris$Centered.Petal.Length)
mean(iris$Petal.Length)
